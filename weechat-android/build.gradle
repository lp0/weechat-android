buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.0.0-rc1'
    }
}
apply plugin: 'com.android.application'

dependencies {
    compile 'com.android.support:support-v4:18.0.+'
    compile 'com.android.support:support-annotations:+' // For @Nullable/@NonNull

    compile "eu.lp0.slf4j:slf4j-android:1.7.10-0" // Android Logging API

    compile "commons-codec:commons-codec:1.8"

    // These provide support for older android devices
    compile "com.actionbarsherlock:actionbarsherlock:4.4.0@aar"
    compile "com.actionbarsherlock:viewpagerindicator:2.4.1"

    // We need the weechat-relay library for connecting to weechat    
    compile(project(':weechat-relay'))
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

android {
    compileSdkVersion 20
    buildToolsVersion "19.1.0"

    defaultConfig {
        versionCode 12
        versionName "0.9"

        minSdkVersion 8
        targetSdkVersion 20
    }

    signingConfigs {
	releasePlayConfig
	devPlayConfig
    }

    // Setup a bit of buildconfiguration
    buildTypes {
        // Debug version, only ever used locally
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
            buildConfigField "String", "VERSION_BANNER", "\""+versionBanner()+"\""
        }

        // These are the real releases in the Google Play Store
        release {
            buildConfigField "String", "VERSION_BANNER", "\"" + versionBanner() + "\""
            signingConfig signingConfigs.releasePlayConfig

            minifyEnabled true
            proguardFile file('proguard.txt')
            proguardFile getDefaultProguardFile('proguard-android-optimize.txt')
        }

        // Development releases in the Google Play Store(signed same as the cloudbees site)
        devrelease.initWith(buildTypes.release)
        devrelease {
            applicationIdSuffix ".dev"
            versionNameSuffix "-dev"
            buildConfigField "String", "VERSION_BANNER", "\""+versionBanner()+"\""
	        signingConfig signingConfigs.devPlayConfig

            minifyEnabled true
            proguardFile file('proguard.txt')
            proguardFile getDefaultProguardFile('proguard-android-optimize.txt')
        }
    }
}

// Load properties from the user's local gradle.properties file(for both release and "dev" release builds)
if (project.hasProperty('devStorefile') &&
    project.hasProperty('devStorePassword') &&
    project.hasProperty('devKeyAlias') &&
    project.hasProperty('devKeyPassword')) {
    android.signingConfigs.devPlayConfig.storeFile = file(devStorefile)
    android.signingConfigs.devPlayConfig.storePassword = devStorePassword
    android.signingConfigs.devPlayConfig.keyAlias = devKeyAlias
    android.signingConfigs.devPlayConfig.keyPassword = devKeyPassword
} else {
    project.logger.warn('WARN: Set the values devStorefile, devStorePassword, devKeyAlias, and devKeyPassword in ~/.gradle/gradle.properties to sign the release.')
    android.buildTypes.devrelease.signingConfig = null
}

if (project.hasProperty('releaseStorefile') &&
    project.hasProperty('releaseStorePassword') &&
    project.hasProperty('releaseKeyAlias') &&
    project.hasProperty('releaseKeyPassword')) {
    android.signingConfigs.releasePlayConfig.storeFile = file(releaseStorefile)
    android.signingConfigs.releasePlayConfig.storePassword = releaseStorePassword
    android.signingConfigs.releasePlayConfig.keyAlias = releaseKeyAlias
    android.signingConfigs.releasePlayConfig.keyPassword = releaseKeyPassword
} else {
    project.logger.warn('WARN: Set the values releaseStorefile, releaseStorePassword, releaseKeyAlias, and releaseKeyPassword in ~/.gradle/gradle.properties to sign the release.')
    android.buildTypes.release.signingConfig = null
}


String versionBanner() {
    return 'git describe'.execute().text.trim()
}



